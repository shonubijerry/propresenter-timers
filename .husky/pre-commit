set -e

# Detect current branch
BRANCH=$(git rev-parse --abbrev-ref HEAD)

if [ "$BRANCH" != "master" ]; then
  echo "üõë Not pushing to master. Skipping build + version bump."
  exit 0
fi

echo "üöÄ Running Next.js build, zipping output, and bumping version for master..."

# Ensure dependencies are installed
if [ ! -d "node_modules" ]; then
  echo "üì¶ Installing dependencies..."
  npm ci
fi

# Run Next.js build
npm run build:next

# Validate build output
if [ ! -d "out" ]; then
  echo "‚ùå Directory 'out' not found. Build failed."
  exit 1
fi

# Create update.zip
cd out
zip -r update.zip . >/dev/null
mv update.zip ..
cd ..

echo "‚úÖ Created update.zip successfully."

# -----------------------------
# üî¢ Increment version.json
# -----------------------------
VERSION_FILE="version.json"

if [ -f "$VERSION_FILE" ]; then
  echo "üîç Found version.json, incrementing version..."
  CURRENT_VERSION=$(jq -r '.version' "$VERSION_FILE")

  if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "‚ùå Invalid version format in version.json: $CURRENT_VERSION"
    exit 1
  fi

  IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
  patch=$((patch + 1))
  NEW_VERSION="$major.$minor.$patch"

  # Update version in JSON without touching zipUrl
  jq --arg v "$NEW_VERSION" '.version = $v' "$VERSION_FILE" > tmp.$$.json && mv tmp.$$.json "$VERSION_FILE"

  echo "üìà Version bumped: $CURRENT_VERSION ‚Üí $NEW_VERSION"
else
  echo "‚ö†Ô∏è version.json not found, skipping version bump."
fi

echo "Adding changes to commit..."
git add update.zip version.json

echo "‚úÖ Build, zip, version bump, and push completed successfully."
